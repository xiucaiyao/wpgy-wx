<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="product">  
	<resultMap id="productMap" type="com.biz.po.ProductBean" >
		<id column="PRODUCT_ID" property="productId" jdbcType="VARCHAR" />
		<result column="SERIAL" property="serial" jdbcType="VARCHAR" />
		<result column="NAME" property="name" jdbcType="VARCHAR" />
		<result column="ALIAS_NAME" property="aliasName" jdbcType="VARCHAR" />
		<result column="PRODUCT_TYPE" property="productType" jdbcType="VARCHAR" />
		<result column="BRAND" property="brand" jdbcType="VARCHAR" />
		<result column="CUSTOMER_ID" property="customerId" jdbcType="VARCHAR" />
		<result column="PRICE" property="price" jdbcType="DECIMAL" />
<!-- 		<result column="COMMON_PRICE" property="commonPrice" jdbcType="DECIMAL" /> -->
		<result column="SALES_VOLUME" property="salesVolume" jdbcType="DECIMAL" />
		<result column="PRODUCT_SALE_TYPE" property="productSaleType" jdbcType="VARCHAR" />
		<result column="SPEC" property="spec" jdbcType="VARCHAR" />
		<result column="ONLINE_TIME" property="onlineTime" jdbcType="TIMESTAMP" />
		<result column="SMALLPIC" property="smallpic" jdbcType="VARCHAR" />
		<result column="SHELFLIFE" property="shelfLife" jdbcType="INTEGER" />
		<result column="BIGPIC" property="bigPic" jdbcType="VARCHAR" />
		<result column="MEMO_CPJS" property="memoCpjs" jdbcType="VARCHAR" />
		<result column="MEMO_YYBK" property="memoYybk" jdbcType="VARCHAR" />
		<result column="MEMO_DPTJ" property="memoDptj" jdbcType="VARCHAR" />
		<result column="MEMO_CPRZ" property="memoCprz" jdbcType="VARCHAR" />
		<result column="MEMO_SCJD" property="memoScjd" jdbcType="VARCHAR" />
		<result column="MEMO_CPJG" property="memoCpjg" jdbcType="VARCHAR" />
		<result column="MEMO_CPPS" property="memoCpps" jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- 产品销量查询SQL -->
	<sql id="product_sales_volume">
		select serial, COUNT(serial) as sales_volume from TB_ORDER
			inner join TB_ORDER_DETAIL on TB_ORDER.ORDER_ID=TB_ORDER_DETAIL.ORDER_ID
			where ORDER_STATE='审核' and ORDER_DATE>dateadd(day, -30, getdate())
				group by serial
	</sql>
	
	<!-- 产品查询条件 -->
	<sql id="product_where_clause" >
		and V_PRODUCT_PRICE.price is not null
	    <if test="searchKeywords != null and searchKeywords != '' " >
			<![CDATA[
				and (V_PRODUCT_PRICE.serial like #{searchKeywords}
				or name like #{searchKeywords}
				or product_type like #{searchKeywords}
				or alias_name like #{searchKeywords})
			]]>
		</if>
		<if test="serial != null and serial !='' " >
			<![CDATA[
				and V_PRODUCT_PRICE.serial=#{serial}
			]]>
		</if>
		<if test="productType != null and productType !='' " >
			<![CDATA[
				and V_PRODUCT_PRICE.PRODUCT_TYPE=#{productType}
			]]>
		</if>
		<if test="brand != null and brand !='' " >
			<![CDATA[
				and V_PRODUCT_PRICE.brand=#{brand}
			]]>
		</if>
		<if test="productSaleType != null and productSaleType != '' " >
			<![CDATA[
				and V_PRODUCT_PRICE.PRODUCT_SALE_TYPE=#{productSaleType}
			]]>
		</if>
		<if test="priceStartRange != null" >
			<![CDATA[
				and V_PRODUCT_PRICE.price > #{priceStartRange}
			]]>
		</if>
		<if test="priceEndRange != null" >
			<![CDATA[
				and V_PRODUCT_PRICE.price <= #{priceEndRange}
			]]>
		</if>
		<if test="orderSql != null and orderSql != '' " >
			<![CDATA[
				${orderSql}
			]]>
		</if>
	</sql>
	
	<!-- 产品信息分页查询 , common_price-->
	<select id="productQuery" parameterType="productQueryBean" resultMap="productMap">  
        select top ${pageItems} V_PRODUCT_PRICE.serial, name, price, product_sale_type, spec, smallpic, sales_volume from V_PRODUCT_PRICE
        	left join (<include refid="product_sales_volume" />) as TB_SALES_VOLUME on TB_SALES_VOLUME.SERIAL=V_PRODUCT_PRICE.SERIAL
			where is_online=1
			and V_PRODUCT_PRICE.serial not in (select top ${startItem} V_PRODUCT_PRICE.serial from V_PRODUCT_PRICE 
				left join (<include refid="product_sales_volume" />) as TB_SALES_VOLUME on TB_SALES_VOLUME.SERIAL=V_PRODUCT_PRICE.SERIAL
			where is_online=1 <include refid="product_where_clause" />)
				<include refid="product_where_clause" />
    </select>
    
    <!-- 查询产品分类 -->
	<select id="queryProductType" resultType="distionaryBean">  
        select VC_PARENT_CODE as vcParentCode,
			VC_CODE as vcCode,
			VC_NAME as vcName, 
			VC_VALUE as vcValue, 
			DISPLAY_ORDER as displayOrder,
			MEMO as memo
			from TB_BASE_DICTIONARY where VC_CODE='PRODUCT_TYPE' and ONLINE='是' order by DISPLAY_ORDER
    </select>
    
    <!-- 产品信息总记录数查询 -->
	<select id="productCountQuery" parameterType="productQueryBean" resultType="Integer">  
        select count(V_PRODUCT_PRICE.serial) from V_PRODUCT_PRICE
			where is_online=1
			<include refid="product_where_clause" />
    </select>
    
    <!-- 产品信息预览根据Serial , common_price-->
	<select id="productPreviewBySerial" parameterType="String" resultMap="productMap">  
        select product_type, serial, name, alias_name, price, product_sale_type, brand, shelf_life, shorthand, spec, smallpic, bigpic, online_time from V_PRODUCT_PRICE
			where is_online=1 and serial=#{value}
    </select>
    
    <!-- 产品详细根据Serial -->
	<select id="productDetailBySerial" parameterType="String" resultMap="productMap">  
        select product_id, TB_PRODUCT.serial, name, alias_name, product_type, product_sale_type, brand, shelf_life, shorthand, memo, smallpic, 
        	bigpic, online_time, memo_cpjs, memo_yybk, memo_dptj, memo_cprz, memo_scjd, memo_cpjg, memo_cpps  from TB_PRODUCT
				left join TB_PRODUCT_INFO on TB_PRODUCT.serial=TB_PRODUCT_INFO.serial
				where is_online=1 and TB_PRODUCT.serial=#{value}
    </select>
    
    <!-- 产品所有规格价格根据Serial查询, common_price-->
	<select id="productSpecPriceBySerial" parameterType="String" resultType="java.util.LinkedHashMap">
		<![CDATA[
        select TB_PRICE_DATE_DETAIL.serial, price, TB_PRICE_DATE_DETAIL.spec, is_defalut_spec from TB_DATE_PRICE 
			inner join TB_PRICE_DATE_DETAIL on TB_DATE_PRICE.DATE_PRICE_ID=TB_PRICE_DATE_DETAIL.DATE_PRICE_ID
			inner join TB_PRODUCT_SPEC on TB_PRICE_DATE_DETAIL.serial=TB_PRODUCT_SPEC.serial
			where TB_DATE_PRICE.CUSTOMER_TYPE='充值卡客户' and TB_PRICE_DATE_DETAIL.spec = TB_PRODUCT_SPEC.spec and BEGIN_DATE <= CONVERT(varchar(100), GETDATE(), 23) and end_date >= CONVERT(varchar(100), GETDATE(), 23) 
				and TB_PRICE_DATE_DETAIL.serial=#{value}
		]]>
    </select>
    
    <!-- 查询产品规格价格 , common_price-->
	<select id="queryProductSpecPrice" parameterType="java.util.Map" resultMap="productMap">
		<![CDATA[
        select TB_PRODUCT.name, TB_PRICE_DATE_DETAIL.serial, brand, product_sale_type, price, TB_PRICE_DATE_DETAIL.spec, smallpic from TB_DATE_PRICE 
			inner join TB_PRICE_DATE_DETAIL on TB_DATE_PRICE.DATE_PRICE_ID=TB_PRICE_DATE_DETAIL.DATE_PRICE_ID
			inner join TB_PRODUCT on TB_PRODUCT.serial=TB_PRICE_DATE_DETAIL.serial
			left join TB_PRODUCT_INFO on TB_PRODUCT.serial=TB_PRODUCT_INFO.serial
			where BEGIN_DATE <= CONVERT(varchar(100), GETDATE(), 23) and end_date >= CONVERT(varchar(100), GETDATE(), 23) 
				and TB_DATE_PRICE.CUSTOMER_TYPE='充值卡客户' and is_online=1 and TB_PRODUCT.serial=#{serial} and TB_PRICE_DATE_DETAIL.spec=#{spec}
		]]>
    </select>
    
    <!-- 滚动信息查询 -->
    <select id="scrollingMessageQuery" resultType="scrollingMessageBean">
    	select top 5 SCROLLING_MESSAGE_ID as scrollingMessageId, TITLE as title, SCROLLING_PIC as scrollingPic
    			from TB_SCROLLING_MESSAGE order by DISPLAY_ORDER
    </select>
    
    <!-- 滚动信息根据ID查询 -->
    <select id="queryScrollingMessageById" parameterType="String" resultType="scrollingMessageBean">
    	select SCROLLING_MESSAGE_ID as scrollingMessageId, DISPLAY_ORDER as displayOrder, TITLE as title,
    		SCROLLING_PIC as scrollingPic, LINK_URL as linkUrl, DESCRIBE_HTML as describeHtml
    	from TB_SCROLLING_MESSAGE
    		where SCROLLING_MESSAGE_ID = #{value}
    </select>
    
    <!-- 大客户产品信息查询 -->
	<select id="vipCustomerProductQuery" parameterType="productQueryBean" resultMap="productMap">  
        select serial, name, price, product_sale_type, spec, smallpic from V_VIP_CUSTOMER_PRODUCT_PRICE
			where is_online=1 and price is not null and pricegrade=#{priceGrade}
	    <if test="searchKeywords != null and searchKeywords != '' " >
			<![CDATA[
				and (serial like #{searchKeywords}
				or name like #{searchKeywords}
				or product_type like #{searchKeywords}
				or alias_name like #{searchKeywords}
				or shorthand like #{searchKeywords})
			]]>
		</if>
		<if test="productType != null and productType !='' " >
			<![CDATA[
				and PRODUCT_TYPE=#{productType}
			]]>
		</if>
		<if test="brand != null and brand !='' " >
			<![CDATA[
				and brand=#{brand}
			]]>
		</if>
		order by display_order
    </select>
    
    <!-- 特殊客户产品信息查询 -->
	<select id="specialCustomerProductQuery" parameterType="productQueryBean" resultMap="productMap">  
        select serial, name, price, product_sale_type, spec, smallpic from V_SPECIAL_CUSTOMER_PRODUCT_PRICE
			where is_online=1 and price is not null and customer_id=#{customerId}
	    <if test="searchKeywords != null and searchKeywords != '' " >
			<![CDATA[
				and (serial like #{searchKeywords}
				or name like #{searchKeywords}
				or product_type like #{searchKeywords}
				or alias_name like #{searchKeywords}
				or shorthand like #{searchKeywords})
			]]>
		</if>
		<if test="productType != null and productType !='' " >
			<![CDATA[
				and PRODUCT_TYPE=#{productType}
			]]>
		</if>
		<if test="brand != null and brand !='' " >
			<![CDATA[
				and brand=#{brand}
			]]>
		</if>
		order by display_order
    </select>
    
    <!-- 批量查询大客户选择的产品信息 -->
    <select id="bathQueryVipCustomerProduct" resultMap="productMap" parameterType="java.util.Map" >
	    select serial, name, price, product_sale_type, spec, smallpic from V_VIP_CUSTOMER_PRODUCT_PRICE
				where is_online=1 and price is not null and pricegrade=#{priceGrade} and serial in
		    <foreach collection="productSerialList" item="item" index="index" open="(" separator="," close=")"> 
		        #{item}
		    </foreach>
    </select>
    
    <!-- 批量查询特殊客户选择的产品信息 -->
    <select id="bathQuerySpecialCustomerProduct" parameterType="java.util.Map" resultMap="productMap">
	    select serial, name, price, product_sale_type, spec, smallpic from V_SPECIAL_CUSTOMER_PRODUCT_PRICE
				where is_online=1 and price is not null and customer_id=#{customerId} and serial in
		    <foreach collection="productSerialList" item="item" index="index" open="(" separator="," close=")"> 
		        #{item}
		    </foreach>
    </select>
    
    <!-- 摊位客户产品信息查询 -->
	<select id="marketCustomerProductQuery" parameterType="productQueryBean" resultMap="productMap">  
        select serial, name, price, product_sale_type, spec, smallpic from V_MARKET_CUSTOMER_PRODUCT_PRICE
			where is_online=1 and price is not null
	    <if test="searchKeywords != null and searchKeywords != '' " >
			<![CDATA[
				and (serial like #{searchKeywords}
				or name like #{searchKeywords}
				or product_type like #{searchKeywords}
				or alias_name like #{searchKeywords}
				or shorthand like #{searchKeywords})
			]]>
		</if>
		<if test="productType != null and productType !='' " >
			<![CDATA[
				and PRODUCT_TYPE=#{productType}
			]]>
		</if>
		order by display_order,serial
    </select>
    
    <!-- 批量查询客户选择的产品信息 -->
    <select id="bathQueryMarketCustomerProduct" resultMap="productMap" parameterType="java.util.List">
	    select serial, name, price, product_sale_type, spec, smallpic from V_MARKET_CUSTOMER_PRODUCT_PRICE
				where is_online=1 and price is not null and 
		    <foreach collection="list" item="item" index="index" open="(" separator="or" close=")"> 
		        (serial=#{item.productSerial} and spec=#{item.spec})
		    </foreach>
    </select>
    
</mapper>
